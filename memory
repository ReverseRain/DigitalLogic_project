`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 2023/12/15 09:33:20
// Design Name: 
// Module Name: memory
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module memory(
input clk, 
input [6:0] notes,
input ishigher,
input islower,
//input stopLoad,
input isMemory,
input reset,
input enable,
//output wire SS,
//output wire MM,
//output wire [31:0]TV,
//output wire [31:0]TVC,
//output wire [31:0]ST,
output wire[13:0] outad,
output wire[13:0]inad,
output wire [13:0] addressA,
//output wire [31:0] freA,
//output wire [31:0]out1,
//output wire h,
output reg[31:0] fre,
output reg [3:0]an,
output reg [6:0]ledlight,
output reg [6:0]light,
output reg pwm
    );
    `include "parameter_project.v"
    



reg [31:0] frequency;
wire [31:0] outfre;
reg[13:0] address;
reg[13:0] inaddress=0;
wire trueWea;

wire [6:0]inledlight;
wire [3:0]inan;
wire inpwm;
wire [6:0]inlight;

wire [6:0]outledlight;
wire [3:0]outan;
wire outpwm;
wire [6:0]outlight;


    RAM ram (
        .clka(clk), // input wire clka
        .wea(trueWea), // input wire [0 : 0] wea
        .addra(address), // input wire [13 : 0] addra
        .dina(frequency), // input wire [31 : 0] dina
         .douta(outfre)// output wire [31 : 0] douta
        );
    reg [13:0]outaddress=1;
    music freeMusic(.reset(reset),.clk(clk),.notes(notes),.islower(islower),.ismemory(true)
    ,.ishigher(ishigher),.isdefine(false),.light(inlight),.ledlight(inledlight),.an(inan),.pwm(inpwm));
    
    Buzz buzz(.clk(clk),.frequency(outfre),.pwm(outpwm),.reset(reset),.modechange(false));
    LED led(.clk(clk),.mode(memory),.num(2'b11),.fre(outfre),.an(outan),.a_g(outledlight));
    
//    Automusic autoM(.reset(reset),.clk(clk),.lights(outlight),.led_light(outledlight),.an(outan),.pwm(outpwm)
//    ,.isMatch(false),.isAuto(1'b1),.isMemory(~trueWea),.outaddress(outaddress),.outfre(outfre)
////    ,  .frequency(freA),.h(h),.MM(MM),.SS(SS)
////,.ST(ST)
////,.TV(TV),.TVC(TVC)
//    );
    assign trueWea=(enable==1'b1&&isMemory==1'b1);
    assign outad=outaddress;
    assign inad=inaddress;
    assign addressA=address;
    reg[31:0] cnt=0;
always@(posedge clk) begin
if(cnt<=125*100000*4) begin
cnt<=cnt+1;
end
else begin
outaddress<=outaddress+1;
cnt<=0;
end

end


    always @(*) begin
    if(enable==1'b1&&isMemory==1'b1) begin
           inaddress=inaddress+1'b1;
            if (!ishigher&&!islower) begin
                    case (notes)
            7'b1000000:frequency=do;
            7'b0100000:frequency=re; 
            7'b0010000:frequency=mi;
            7'b0001000:frequency=fa;  
            7'b0000100:frequency=sol;
            7'b0000010:frequency=la;    
            7'b0000001:frequency=si;
            default frequency=0;
                endcase  
            end
            else if (ishigher&&!islower) begin
                         case (notes)
            7'b1000000: frequency=do_high;
            7'b0100000:frequency=re_high;
            7'b0010000:frequency=mi_high;
            7'b0001000:frequency=fa_high;
            7'b0000100:frequency=sol_high;
            7'b0000010:frequency=la_high;
            7'b0000001:frequency=si_high;
            default frequency=0;
                endcase
            end
            else if (!ishigher&&islower) begin
                case (notes)
            7'b1000000:frequency=do_low;
            7'b0100000:frequency=re_low;
            7'b0010000:frequency=mi_low;
            7'b0001000:frequency=fa_low;
            7'b0000100:frequency=sol_low;
            7'b0000010:frequency=la_low;
            7'b0000001: frequency=si_low;
            default frequency=0;
                endcase
            end
            end
         
         end
    
    always @(posedge clk) begin
    if(trueWea==1'b1) begin
    an=inan;
    ledlight=inledlight;
    light=inlight;
    pwm=inpwm;
    address=inaddress;
    fre=frequency;
    end
    else begin
    an=outan;
    ledlight=outledlight;
    light=outlight;
    pwm=outpwm;
    address=outaddress;
    fre=outfre;
    end
    end
endmodule
